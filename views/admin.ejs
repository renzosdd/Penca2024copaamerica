<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Admin - Edit User</title>
  <link rel="stylesheet" href="/css/materialize.min.css" />
  <link rel="stylesheet" href="/css/admin.css" />
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
  <style>
    body {
      display: flex;
      min-height: 100vh;
      flex-direction: column;
    }
    main {
      flex: 1 0 auto;
      padding-bottom: 20px;
    }
  </style>
</head>
<body>
  <%- include('partials/header') %>

  <main>
    <div id="users" class="col s12">
      <div class="container">
        <h3>Editar Usuario</h3>
        <div class="row">
          <div class="input-field col s12 m6">
            <select id="user-select">
              <option value="" disabled selected>Elige un usuario</option>
              <% users.forEach(function(user) { %>
                <option value="<%= user.username %>"><%= user.username %></option>
              <% }); %>
            </select>
            <label>Seleccionar Usuario</label>
          </div>
          <div class="col s6 m3">
            <button id="prev-users" class="btn waves-effect waves-light" type="button">Anterior</button>
          </div>
          <div class="col s6 m3">
            <button id="next-users" class="btn waves-effect waves-light" type="button">Siguiente</button>
          </div>
        </div>
        <form id="editUserForm" class="row" method="POST" action="/admin/update" enctype="multipart/form-data">
          <!-- Aquí van los campos del usuario que se van a editar -->
        </form>
      </div>
    </div>

    <div id="competitions" class="col s12">
      <div class="container">
        <h3>Competencias</h3>
        <form id="createCompetitionForm" class="row">
          <div class="input-field col s12 m6">
            <input id="competitionName" type="text" required />
            <label for="competitionName">Nombre</label>
          </div>
          <div class="input-field col s12 m6">
            <select id="competitionUseApi">
              <option value="false" selected>Cargar Fixture</option>
              <option value="true">Usar API</option>
            </select>
            <label>Fuente de datos</label>
          </div>
          <div class="file-field input-field col s12">
            <div class="btn">
              <span>Fixture JSON</span>
              <input id="competitionFixture" type="file" accept=".json" />
            </div>
            <div class="file-path-wrapper">
              <input class="file-path validate" type="text" />
            </div>
          </div>
          <div class="col s12">
            <button class="btn waves-effect waves-light" type="submit">Crear</button>
          </div>
        </form>

        <h4>Editar Competencia</h4>
        <form id="editCompetitionForm" class="row">
          <div class="input-field col s12">
            <select id="competitionSelectEdit"></select>
            <label>Competencia</label>
          </div>
          <div class="input-field col s12">
            <input id="competitionNameEdit" type="text" />
            <label for="competitionNameEdit">Nuevo Nombre</label>
          </div>
          <div class="col s12">
            <button class="btn waves-effect waves-light" type="submit">Guardar</button>
          </div>
        </form>

        <div class="row">
          <div class="col s12">
            <ul id="competitionList" class="collection"></ul>
          </div>
        </div>
      </div>
    </div>

    <div id="pencas" class="col s12">
      <div class="container">
        <h3>Pencas</h3>
        <form id="createPencaForm" class="row">
          <div class="input-field col s12 m6">
            <input id="pencaName" type="text" required />
            <label for="pencaName">Nombre</label>
          </div>
          <div class="input-field col s12 m6">
            <input id="participantLimit" type="number" />
            <label for="participantLimit">Límite de participantes</label>
          </div>
          <div class="input-field col s12">
            <select id="pencaOwner"></select>
            <label>Owner</label>
          </div>
          <div class="file-field input-field col s12">
            <div class="btn">
              <span>Fixture JSON</span>
              <input id="pencaFixture" type="file" accept=".json" />
            </div>
            <div class="file-path-wrapper">
              <input class="file-path validate" type="text" />
            </div>
          </div>
          <div class="col s12">
            <button class="btn waves-effect waves-light" type="submit">Crear</button>
          </div>
        </form>

        <h4>Editar Penca</h4>
        <form id="editPencaForm" class="row">
          <div class="input-field col s12">
            <select id="editPencaSelect"></select>
            <label>Penca</label>
          </div>
          <div class="input-field col s12 m6">
            <input id="editPencaName" type="text" />
            <label for="editPencaName">Nuevo Nombre</label>
          </div>
          <div class="input-field col s12 m6">
            <input id="editPencaLimit" type="number" />
            <label for="editPencaLimit">Límite de participantes</label>
          </div>
          <div class="input-field col s12">
            <select id="editPencaOwner"></select>
            <label>Owner</label>
          </div>
          <div class="col s12">
            <button class="btn waves-effect waves-light" type="submit">Guardar</button>
          </div>
        </form>

        <div class="row">
          <div class="col s12">
            <ul id="pencaList" class="collection"></ul>
          </div>
        </div>
    </div>
  </div>

  <div id="owners" class="col s12">
    <div class="container">
      <h3>Owners</h3>
      <form id="createOwnerForm" class="row">
        <div class="input-field col s12 m6">
          <input id="ownerUsername" type="text" required />
          <label for="ownerUsername">Username</label>
        </div>
        <div class="input-field col s12 m6">
          <input id="ownerPassword" type="password" required />
          <label for="ownerPassword">Password</label>
        </div>
        <div class="input-field col s12 m6">
          <input id="ownerEmail" type="email" required />
          <label for="ownerEmail">Email</label>
        </div>
        <div class="input-field col s12 m6">
          <input id="ownerName" type="text" />
          <label for="ownerName">Nombre</label>
        </div>
        <div class="input-field col s12 m6">
          <input id="ownerSurname" type="text" />
          <label for="ownerSurname">Apellido</label>
        </div>
        <div class="col s12">
          <button class="btn waves-effect waves-light" type="submit">Crear</button>
        </div>
      </form>

      <h4>Lista de Owners</h4>
      <ul id="ownerList" class="collection"></ul>
    </div>
  </div>

  <div id="settings" class="col s12">
    <div class="container">
      <h4>Configuraciones</h4>
        <div class="row">
          <div class="col s12 m6">
            <button id="recalculate-btn" class="btn waves-effect waves-light blue darken-3">
              Recalcular Puntajes
            </button>
          </div>
        </div>
      </div>
    </div>
  </main>

  <%- include('partials/footer') %>

  <script src="/js/materialize.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      M.Tabs.init(document.querySelectorAll('.tabs'));
      M.FormSelect.init(document.querySelectorAll('select'));

      let userPage = 0;
      const userLimit = 10;

      function loadUsers() {
        const select = document.getElementById('user-select');
        if (!select) return;

        fetch(`/admin/edit?page=${userPage}&limit=${userLimit}`, { headers: { Accept: 'application/json' } })
          .then(r => r.json())
          .then(data => {
            select.innerHTML = '<option value="" disabled selected>Elige un usuario</option>';
            data.forEach(u => {
              const opt = document.createElement('option');
              opt.value = u.username;
              opt.textContent = u.username;
              select.appendChild(opt);
            });
            M.FormSelect.init(select);
          });
      }

      function loadOwners() {
        const select1 = document.getElementById('pencaOwner');
        const select2 = document.getElementById('editPencaOwner');
        const list = document.getElementById('ownerList');
        fetch('/admin/owners').then(r => r.json()).then(data => {
          [select1, select2].forEach(select => {
            if (select) {
              select.innerHTML = '<option value="" disabled selected>Seleccione Owner</option>';
              data.forEach(o => {
                const opt = document.createElement('option');
                opt.value = o._id;
                opt.textContent = o.username;
                select.appendChild(opt);
              });
              M.FormSelect.init(select);
            }
          });
          if (list) {
            list.innerHTML = '';
            data.forEach(o => {
              const li = document.createElement('li');
              li.className = 'collection-item';
              li.dataset.id = o._id;
              li.dataset.username = o.username;
              li.dataset.email = o.email;
              li.dataset.name = o.name || '';
              li.dataset.surname = o.surname || '';
              li.innerHTML = `
                <span class="title">${o.username}</span>
                <p>${o.email}</p>
                <div class="secondary-content">
                  <a href="#" class="edit-owner-btn"><i class="material-icons">edit</i></a>
                  <a href="#" class="delete-owner-btn"><i class="material-icons red-text">delete</i></a>
                </div>`;
              list.appendChild(li);
            });
          }
        });
      }

      function setupOwnerForm() {
        const form = document.getElementById('createOwnerForm');
        if (!form) return;
        form.addEventListener('submit', async e => {
          e.preventDefault();
          const data = {
            username: document.getElementById('ownerUsername').value,
            password: document.getElementById('ownerPassword').value,
            email: document.getElementById('ownerEmail').value,
            name: document.getElementById('ownerName').value,
            surname: document.getElementById('ownerSurname').value
          };
          try {
            const resp = await fetch('/admin/owners', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data)
            });
            const res = await resp.json();
            if (resp.ok) {
              form.reset();
              M.updateTextFields();
              loadOwners();
              M.toast({ html: 'Owner creado', classes: 'green' });
            } else {
              M.toast({ html: res.error || 'Error', classes: 'red' });
            }
          } catch (err) {
            console.error('create owner error', err);
            M.toast({ html: 'Error', classes: 'red' });
          }
        });
      }

      function setupOwnerListActions() {
        const list = document.getElementById('ownerList');
        if (!list) return;
        list.addEventListener('click', async e => {
          const editBtn = e.target.closest('.edit-owner-btn');
          const delBtn = e.target.closest('.delete-owner-btn');
          if (editBtn) {
            e.preventDefault();
            const li = editBtn.closest('li');
            const id = li.dataset.id;
            const username = prompt('Username', li.dataset.username);
            if (username === null) return;
            const email = prompt('Email', li.dataset.email);
            if (email === null) return;
            const name = prompt('Nombre', li.dataset.name);
            if (name === null) return;
            const surname = prompt('Apellido', li.dataset.surname);
            if (surname === null) return;
            try {
              const resp = await fetch(`/admin/owners/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, email, name, surname })
              });
              const res = await resp.json();
              if (resp.ok) {
                M.toast({ html: 'Owner actualizado', classes: 'green' });
                loadOwners();
              } else {
                M.toast({ html: res.error || 'Error', classes: 'red' });
              }
            } catch (err) {
              console.error('update owner error', err);
              M.toast({ html: 'Error', classes: 'red' });
            }
          } else if (delBtn) {
            e.preventDefault();
            const li = delBtn.closest('li');
            const id = li.dataset.id;
            if (!confirm('Eliminar owner?')) return;
            try {
              const resp = await fetch(`/admin/owners/${id}`, { method: 'DELETE' });
              const res = await resp.json();
              if (resp.ok) {
                M.toast({ html: 'Owner eliminado', classes: 'green' });
                loadOwners();
              } else {
                M.toast({ html: res.error || 'Error', classes: 'red' });
              }
            } catch (err) {
              console.error('delete owner error', err);
              M.toast({ html: 'Error', classes: 'red' });
            }
          }
        });
      }

      function loadCompetitions() {
        const list = document.getElementById('competitionList');
        const select = document.getElementById('competitionSelectEdit');
        fetch('/admin/competitions').then(r => r.json()).then(data => {
          if (list) list.innerHTML = data.map(c => `<li class="collection-item">${c.name}</li>`).join('');
          if (select) {
            select.innerHTML = '<option value=\"\" disabled selected>Seleccione competencia</option>';
            data.forEach(c => {
              const opt = document.createElement('option');
              opt.value = c._id;
              opt.textContent = c.name;
              select.appendChild(opt);
            });
            M.FormSelect.init(select);
          }
        });
      }

      function loadPencas() {
        const list = document.getElementById('pencaList');
        const select = document.getElementById('editPencaSelect');
        fetch('/admin/pencas').then(r => r.json()).then(data => {
          if (list) list.innerHTML = data.map(p => `<li class="collection-item">${p.name}</li>`).join('');
          if (select) {
            select.innerHTML = '<option value=\"\" disabled selected>Seleccione Penca</option>';
            data.forEach(p => {
              const opt = document.createElement('option');
              opt.value = p._id;
              opt.textContent = p.name;
              select.appendChild(opt);
            });
            M.FormSelect.init(select);
          }
        });
      }

      function setupRecalculateButton() {
        const btn = document.getElementById('recalculate-btn');
        if (btn) {
          btn.addEventListener('click', async () => {
            try {
              const resp = await fetch('/ranking/recalculate', { method: 'POST' });
              const msg = resp.ok ? 'Puntajes recalculados' : 'Error al recalcular';
              const color = resp.ok ? 'green' : 'red';
              M.toast({ html: msg, classes: color });
            } catch (err) {
              console.error(err);
              M.toast({ html: 'Error al recalcular', classes: 'red' });
            }
          });
        }
      }

      function setupUserPagination() {
        const nextBtn = document.getElementById('next-users');
        const prevBtn = document.getElementById('prev-users');
        if (nextBtn) {
          nextBtn.addEventListener('click', e => {
            e.preventDefault();
            userPage++;
            loadUsers();
          });
        }
        if (prevBtn) {
          prevBtn.addEventListener('click', e => {
            e.preventDefault();
            if (userPage > 0) {
              userPage--;
              loadUsers();
            }
          });
        }
      }

      loadUsers();
      loadOwners();
      loadCompetitions();
      loadPencas();
      setupOwnerForm();
      setupOwnerListActions();
      setupUserPagination();
      setupRecalculateButton();
    });
  </script>
</body>
</html>
