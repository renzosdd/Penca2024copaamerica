<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Edit User</title>
    <link rel="stylesheet" href="/css/materialize.min.css">
    <link href="/css/admin.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <style>
        /* Ensuring the footer stays at the bottom */
        body {
            display: flex;
            min-height: 100vh;
            flex-direction: column;
        }
        main {
            flex: 1 0 auto;
            padding-bottom: 20px; /* Ensure there is space between body content and footer */
        }
    </style>
</head>
<body>
    <header>
        <nav>
            <div class="nav-wrapper blue darken-3">
                <a href="/" class="brand-logo">Admin - <%= user.username %></a>
                <a href="#" data-target="mobile-demo" class="sidenav-trigger right"><i class="material-icons">menu</i></a>
                <ul class="right hide-on-med-and-down">
                    <li>
                        <a class="dropdown-trigger" href="#!" data-target="user-dropdown">
                            <i class="material-icons">account_circle</i>
                        </a>
                    </li>
                </ul>
            </div>
        </nav>
        <ul id="user-dropdown" class="dropdown-content">
            <li><a href="/dashboard">Dashboard</a></li>
            <li><a href="#" id="logout-button">Cerrar sesión</a></li>
        </ul>
        <ul class="sidenav" id="mobile-demo">
            <li><a href="/dashboard">Dashboard</a></li>
            <li><a href="#" id="logout-button-mobile">Cerrar sesión</a></li>
        </ul>
        <div class="nav-content">
            <ul class="tabs tabs-transparent blue darken-3">
                <li class="tab"><a class="active" href="#users">Users</a></li>
                <li class="tab"><a href="#competitions">Competitions</a></li>
                <li class="tab"><a href="#pencas">Pencas</a></li>
                <li class="tab"><a href="#settings">Settings</a></li>
            </ul>
        </div>
    </header>
    <main>
        <div id="users" class="col s12">
            <div class="container">
                <h3>Editar Usuario</h3>
                <div class="input-field col s12">
                    <select id="user-select">
                        <option value="" disabled selected>Elige un usuario</option>
                        <% users.forEach(function(user) { %>
                            <option value="<%= user.username %>"><%= user.username %></option>
                        <% }); %>
                    </select>
                    <label>Seleccionar Usuario</label>
                </div>
                <form id="editUserForm" method="POST" action="/admin/update" enctype="multipart/form-data">
                    <div class="input-field">
                        <input id="username" name="username" type="text" required>
                        <label for="username">Nombre de usuario</label>
                    </div>
                    <div class="input-field">
                        <input id="name" name="name" type="text">
                        <label for="name">Nombre</label>
                    </div>
                    <div class="input-field">
                        <input id="surname" name="surname" type="text">
                        <label for="surname">Apellido</label>
                    </div>
                    <div class="input-field">
                        <input id="email" name="email" type="email">
                        <label for="email">Correo Electrónico</label>
                    </div>
                    <div class="input-field">
                        <input id="dob" name="dob" type="date">
                        <label for="dob">Fecha de Nacimiento</label>
                    </div>
                    <div class="input-field">
                        <select id="role" name="role">
                            <option value="user">Usuario</option>
                            <option value="admin">Administrador</option>
                        </select>
                        <label for="role">Rol</label>
                    </div>
                    <div class="input-field">
                        <select id="valid" name="valid">
                            <option value="true">Válido</option>
                            <option value="false">Inválido</option>
                        </select>
                        <label for="valid">Estado</label>
                    </div>
                    <div class="file-field input-field">
                        <div class="btn">
                            <span>Avatar</span>
                            <input type="file" name="avatar">
                        </div>
                        <div class="file-path-wrapper">
                            <input class="file-path validate" type="text">
                        </div>
                    </div>
                    <button class="btn waves-effect waves-light" type="submit">Actualizar</button>
                </form>
            </div>
        </div>
        <div id="competitions" class="col s12">
            <div class="container">
                <h3>Nueva Competencia</h3>
                <form id="createCompetitionForm" method="POST" action="/admin/competitions" enctype="multipart/form-data">
                    <div class="input-field">
                        <input id="competitionName" name="name" type="text" required>
                        <label for="competitionName">Nombre</label>
                    </div>
                    <p>
                        <label>
                            <input type="checkbox" id="useApi" name="useApi" value="true" />
                            <span>Cargar fixture desde API-Football</span>
                        </label>
                    </p>
                    <div class="file-field input-field">
                        <div class="btn">
                            <span>Fixture JSON</span>
                            <input type="file" name="fixture" accept="application/json">
                        </div>
                        <div class="file-path-wrapper">
                            <input class="file-path validate" type="text">
                        </div>
                    </div>
                    <button class="btn waves-effect waves-light" type="submit">Crear</button>
                </form>
                <h4>Competencias existentes</h4>
                <ul id="competitionList" class="collection"></ul>
                <h4>Editar Competencia</h4>
                <form id="editCompetitionForm">
                    <div class="input-field">
                        <select id="competitionSelectEdit"></select>
                        <label for="competitionSelectEdit">Competencia</label>
                    </div>
                    <div class="input-field">
                        <input id="competitionNewName" type="text">
                        <label for="competitionNewName">Nuevo nombre</label>
                    </div>
                    <button class="btn waves-effect waves-light" type="submit">Actualizar</button>
                    <button class="btn waves-effect waves-light red" id="deleteCompetitionBtn">Eliminar</button>
                </form>
            </div>
        </div>
        <div id="pencas" class="col s12">
            <div class="container">
                <h3>Nuevo Owner</h3>
                <form id="createOwnerForm">
                    <div class="input-field">
                        <input id="ownerUsername" name="username" type="text" required>
                        <label for="ownerUsername">Usuario</label>
                    </div>
                    <div class="input-field">
                        <input id="ownerPassword" name="password" type="password" required>
                        <label for="ownerPassword">Contraseña</label>
                    </div>
                    <div class="input-field">
                        <input id="ownerEmail" name="email" type="email" required>
                        <label for="ownerEmail">Email</label>
                    </div>
                    <div class="input-field">
                        <input id="ownerName" name="name" type="text">
                        <label for="ownerName">Nombre</label>
                    </div>
                    <div class="input-field">
                        <input id="ownerSurname" name="surname" type="text">
                        <label for="ownerSurname">Apellido</label>
                    </div>
                <button class="btn waves-effect waves-light" type="submit">Crear Owner</button>
                </form>

                <h4>Owners existentes</h4>
                <ul id="ownerList" class="collection"></ul>

                <h3>Nueva Penca</h3>
                <form id="createPencaForm" enctype="multipart/form-data">
                    <div class="input-field">
                        <input id="pencaName" name="name" type="text" required>
                        <label for="pencaName">Nombre</label>
                    </div>
                    <div class="input-field">
                        <select id="pencaOwner" name="owner" required></select>
                        <label for="pencaOwner">Owner</label>
                    </div>
                    <div class="input-field">
                        <input id="participantLimit" name="participantLimit" type="number">
                        <label for="participantLimit">Límite de participantes</label>
                    </div>
                    <div class="file-field input-field">
                        <div class="btn">
                            <span>Fixture JSON</span>
                            <input type="file" name="fixture" accept="application/json">
                        </div>
                        <div class="file-path-wrapper">
                            <input class="file-path validate" type="text">
                        </div>
                    </div>
                    <button class="btn waves-effect waves-light" type="submit">Crear Penca</button>
                </form>
                <h4>Editar Penca</h4>
                <form id="editPencaForm">
                    <div class="input-field">
                        <select id="editPencaSelect"></select>
                        <label for="editPencaSelect">Penca</label>
                    </div>
                    <div class="input-field">
                        <input id="editPencaName" type="text">
                        <label for="editPencaName">Nombre</label>
                    </div>
                    <div class="input-field">
                        <input id="editParticipantLimit" type="number">
                        <label for="editParticipantLimit">Límite de participantes</label>
                    </div>
                    <div class="input-field">
                        <select id="editPencaOwner"></select>
                        <label for="editPencaOwner">Owner</label>
                    </div>
                    <button class="btn waves-effect waves-light" type="submit">Actualizar</button>
                    <button class="btn waves-effect waves-light red" id="deletePencaBtn">Eliminar</button>
                </form>
                <h4>Pencas existentes</h4>
                <ul id="pencaList" class="collection"></ul>
            </div>
        </div>
        <div id="settings" class="col s12">
            <div class="container">
                <h3>Settings</h3>
                <p>Configuraciones por venir...</p>
            </div>
        </div>
    </main>
    <footer class="page-footer blue darken-3">
        <div class="container">
            <div class="row">
                <div class="col l6 s12">
                    <h5 class="white-text">Admin Panel</h5>
                    <p class="grey-text text-lighten-4">Administra los usuarios y configuraciones del sistema.</p>
                </div>
                <div class="col l4 offset-l2 s12">
                    <ul class="footer-links">
                        <li><a href="https://www.linkedin.com/in/renzodogliotti/"><img src="/images/linkedin.png" alt="LinkedIn" class="responsive-img" style="width: 24px; height: 24px;"></a></li>
                        <li><a href="https://github.com/renzosdd"><img src="/images/github.png" alt="GitHub" class="responsive-img" style="width: 24px; height: 24px;"></a></li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="footer-copyright">
            <div class="container">
                © 2024 Ren, Todos los derechos reservados.
            </div>
        </div>
    </footer>
    <script src="/js/materialize.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var tabs = document.querySelectorAll('.tabs');
            M.Tabs.init(tabs);

            var selects = document.querySelectorAll('select');
            M.FormSelect.init(selects);

            var dropdowns = document.querySelectorAll('.dropdown-trigger');
            M.Dropdown.init(dropdowns, {
                constrainWidth: false,
                coverTrigger: false
            });

            var sidenavs = document.querySelectorAll('.sidenav');
            M.Sidenav.init(sidenavs);

            document.getElementById('logout-button').addEventListener('click', async () => {
                try {
                    const response = await fetch('/logout', { method: 'POST' });
                    if (response.ok) {
                        window.location.href = '/';
                    } else {
                        console.error('Error al cerrar sesión');
                        M.toast({html: 'Error al cerrar sesión', classes: 'red'});
                    }
                } catch (error) {
                    console.error('Error al cerrar sesión:', error);
                    M.toast({html: 'Error al cerrar sesión', classes: 'red'});
                }
            });

            document.getElementById('logout-button-mobile').addEventListener('click', async () => {
                try {
                    const response = await fetch('/logout', { method: 'POST' });
                    if (response.ok) {
                        window.location.href = '/';
                    } else {
                        console.error('Error al cerrar sesión');
                        M.toast({html: 'Error al cerrar sesión', classes: 'red'});
                    }
                } catch (error) {
                    console.error('Error al cerrar sesión:', error);
                    M.toast({html: 'Error al cerrar sesión', classes: 'red'});
                }
            });

            document.getElementById('user-select').addEventListener('change', async function() {
                const username = this.value;
                try {
                    const response = await fetch(`/admin/user/${username}`);
                    const user = await response.json();
                    if (response.ok) {
                        document.getElementById('username').value = user.username;
                        document.getElementById('name').value = user.name;
                        document.getElementById('surname').value = user.surname;
                        document.getElementById('email').value = user.email;
                        document.getElementById('dob').value = user.dob ? new Date(user.dob).toISOString().split('T')[0] : '';
                        const roleSelect = document.getElementById('role');
                        const validSelect = document.getElementById('valid');
                        roleSelect.value = user.role;
                        validSelect.value = user.valid.toString();
                        M.FormSelect.init(roleSelect);
                        M.FormSelect.init(validSelect);
                        M.updateTextFields();
                    } else {
                        M.toast({html: 'Error al cargar los datos del usuario', classes: 'red'});
                    }
                } catch (error) {
                    console.error('Error al cargar los datos del usuario:', error);
                    M.toast({html: 'Error al cargar los datos del usuario', classes: 'red'});
                }
            });

            document.getElementById('editUserForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                try {
                    const response = await fetch('/admin/update', {
                        method: 'POST',
                        body: formData
                    });
                    if (response.ok) {
                        window.location.href = '/admin/edit';
                    } else {
                        const result = await response.json();
                        console.error('Error:', result.error);
                        M.toast({html: 'Error al actualizar el usuario', classes: 'red'});
                    }
                } catch (error) {
                    console.error('Error al enviar la actualización:', error);
                    M.toast({html: 'Error al enviar la actualización', classes: 'red'});
                }
            });

            const compForm = document.getElementById('createCompetitionForm');
            if (compForm) {
                compForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const formData = new FormData(this);
                    try {
                        const response = await fetch('/admin/competitions', {
                            method: 'POST',
                            body: formData
                        });
                        if (response.ok) {
                            M.toast({html: 'Competencia creada', classes: 'green'});
                            this.reset();
                            loadCompetitions();
                        } else {
                            const result = await response.json();
                            console.error('Error:', result.error);
                            M.toast({html: 'Error al crear competencia', classes: 'red'});
                        }
                    } catch (error) {
                        console.error('Error al crear competencia:', error);
                        M.toast({html: 'Error al crear competencia', classes: 'red'});
                    }
                });
            }

            const ownerForm = document.getElementById('createOwnerForm');
            if (ownerForm) {
                ownerForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const fd = new FormData(ownerForm);
                    const data = {};
                    fd.forEach((v, k) => { data[k] = v; });
                    try {
                        const response = await fetch('/admin/owners', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(data)
                        });
                        if (response.ok) {
                            M.toast({html: 'Owner creado', classes: 'green'});
                            ownerForm.reset();
                            loadOwners();
                        } else {
                            const result = await response.json();
                            console.error('Error:', result.error);
                            M.toast({html: 'Error al crear owner', classes: 'red'});
                        }
                    } catch (error) {
                        console.error('Error al crear owner:', error);
                        M.toast({html: 'Error al crear owner', classes: 'red'});
                    }
                });
            }

            const pencaForm = document.getElementById('createPencaForm');
            if (pencaForm) {
                pencaForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const formData = new FormData(pencaForm);
                    try {
                        const response = await fetch('/admin/pencas', {
                            method: 'POST',
                            body: formData
                        });
                        if (response.ok) {
                            M.toast({html: 'Penca creada', classes: 'green'});
                            pencaForm.reset();
                            loadPencas();
                        } else {
                            const result = await response.json();
                            console.error('Error:', result.error);
                            M.toast({html: 'Error al crear penca', classes: 'red'});
                        }
                    } catch (error) {
                        console.error('Error al crear penca:', error);
                        M.toast({html: 'Error al crear penca', classes: 'red'});
                    }
                });
            }

            const editCompForm = document.getElementById('editCompetitionForm');
            if (editCompForm) {
                editCompForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const id = document.getElementById('competitionSelectEdit').value;
                    const name = document.getElementById('competitionNewName').value;
                    if (!id) return;
                    const res = await fetch('/admin/competitions/' + id, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ name })
                    });
                    if (res.ok) {
                        M.toast({html: 'Competencia actualizada', classes: 'green'});
                        editCompForm.reset();
                        loadCompetitions();
                    } else {
                        M.toast({html: 'Error al actualizar', classes: 'red'});
                    }
                });
                document.getElementById('deleteCompetitionBtn').addEventListener('click', async function(e) {
                    e.preventDefault();
                    const id = document.getElementById('competitionSelectEdit').value;
                    if (!id) return;
                    const res = await fetch('/admin/competitions/' + id, { method: 'DELETE' });
                    if (res.ok) {
                        M.toast({html: 'Competencia eliminada', classes: 'green'});
                        loadCompetitions();
                    } else {
                        M.toast({html: 'Error al eliminar', classes: 'red'});
                    }
                });
            }

            const editPencaForm = document.getElementById('editPencaForm');
            if (editPencaForm) {
                editPencaForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const id = document.getElementById('editPencaSelect').value;
                    if (!id) return;
                    const data = {
                        name: document.getElementById('editPencaName').value,
                        participantLimit: document.getElementById('editParticipantLimit').value,
                        owner: document.getElementById('editPencaOwner').value
                    };
                    const res = await fetch('/admin/pencas/' + id, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });
                    if (res.ok) {
                        M.toast({html: 'Penca actualizada', classes: 'green'});
                        editPencaForm.reset();
                        loadPencas();
                    } else {
                        M.toast({html: 'Error al actualizar penca', classes: 'red'});
                    }
                });
                document.getElementById('deletePencaBtn').addEventListener('click', async function(e) {
                    e.preventDefault();
                    const id = document.getElementById('editPencaSelect').value;
                    if (!id) return;
                    const res = await fetch('/admin/pencas/' + id, { method: 'DELETE' });
                    if (res.ok) {
                        M.toast({html: 'Penca eliminada', classes: 'green'});
                        loadPencas();
                    } else {
                        M.toast({html: 'Error al eliminar penca', classes: 'red'});
                    }
                });
            }

           function loadOwners() {
    const select1 = document.getElementById('pencaOwner');
    const select2 = document.getElementById('editPencaOwner');
    const list = document.getElementById('ownerList');

    fetch('/admin/owners').then(r => r.json()).then(data => {
        // Actualiza el select de creación de Penca
        if (select1) {
            select1.innerHTML = '<option value="" disabled selected>Seleccione Owner</option>';
            data.forEach(o => {
                const opt = document.createElement('option');
                opt.value = o._id;
                opt.textContent = o.username;
                select1.appendChild(opt);
            });
            M.FormSelect.init(select1);
        }

        // Actualiza el select de edición de Penca
        if (select2) {
            select2.innerHTML = '<option value="" disabled selected>Seleccione Owner</option>';
            data.forEach(o => {
                const opt = document.createElement('option');
                opt.value = o._id;
                opt.textContent = o.username;
                select2.appendChild(opt);
            });
            M.FormSelect.init(select2);
        }

        // Lista de owners
        if (list) {
            list.innerHTML = '';
            data.forEach(o => {
                const li = document.createElement('li');
                li.className = 'collection-item';
                li.innerHTML = `<span>${o.username}</span>
                    <a href="#!" class="secondary-content edit-owner" data-id="${o._id}" data-username="${o.username}" data-email="${o.email || ''}" data-name="${o.name || ''}" data-surname="${o.surname || ''}">
                        <i class="material-icons">edit</i>
                    </a>
                    <a href="#!" class="secondary-content delete-owner" data-id="${o._id}">
                        <i class="material-icons red-text">delete</i>
                    </a>`;
                list.appendChild(li);
            });
            attachOwnerActions();
        }
    });
}


            function loadCompetitions() {
                const list = document.getElementById('competitionList');
                const select = document.getElementById('competitionSelectEdit');
                fetch('/admin/competitions').then(r => r.json()).then(data => {
                    if (list) {
                        list.innerHTML = '';
                        data.forEach(c => {
                            const li = document.createElement('li');
                            li.className = 'collection-item';
                            li.textContent = c.name;
                            list.appendChild(li);
                        });
                    }
                    if (select) {
                        select.innerHTML = '<option value="" disabled selected>Seleccione competencia</option>';
                        data.forEach(c => {
                            const opt = document.createElement('option');
                            opt.value = c._id;
                            opt.textContent = c.name;
                            select.appendChild(opt);
                        });
                        M.FormSelect.init(select);
                    }
                });
            }

            function loadPencas() {
                const list = document.getElementById('pencaList');
                const select = document.getElementById('editPencaSelect');
                fetch('/pencas').then(r => r.json()).then(data => {
                    if (list) {
                        list.innerHTML = '';
                        data.forEach(p => {
                            const li = document.createElement('li');
                            li.className = 'collection-item';
                            li.textContent = p.name;
                            list.appendChild(li);
                        });
                    }
                    if (select) {
                        select.innerHTML = '<option value="" disabled selected>Seleccione Penca</option>';
                        data.forEach(p => {
                            const opt = document.createElement('option');
                            opt.value = p._id;
                            opt.textContent = p.name;
                            select.appendChild(opt);
                        });
                        M.FormSelect.init(select);
                    }
                });
            }

            loadCompetitions();
            loadOwners();
            loadPencas();
        });
    </script>
</body>
</html>
